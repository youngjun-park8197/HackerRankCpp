#include <sstream>
#include <vector>
#include <iostream>
using namespace std;

vector<int> parseInts(string str) {
	// Complete this function
    stringstream array(str);
    vector<int> result;
    int temp;
    char ch_ignore;
    
    while(array >> temp)
    {
        result.push_back(temp);
        array >> ch_ignore;
    }
    
    return result;
}

int main() {
    string str;
    cin >> str;
    vector<int> integers = parseInts(str);
    for(int i = 0; i < integers.size(); i++) {
        cout << integers[i] << "\n";
    }
    
    return 0;
}



######################################################################################################
"array >> temp"
 ss >> tmp is a simple extraction. 
 Remember cin >> a from previous exercises. 
 It does the same thing here: Get me the next thing on the stream (which actually is a string) and put it in the variable tmp. 
 Now the trick is, that tmp is of type int, so only if the next thing in the stream is an integer value will this work. 
 The while(ss >> tmp) checks, if it actually did work. 
 If the string is empty (I'm not sure with C++ but in C, strings terminate with an invisible character \0), 
 or if the next thing is not a number, then the test fails, and while skips the rest.

"result.push_back(temp)"
 we are now in the body of the while loop, so the last character was a number and it got saved into tmp. 
 As en example, let's say we had "1,2", then now the 1 is extracted as integer and saved into tmp, 
 and the remaining string in the stream is ",2". We can add that number to the vector (result.push_back(tmp);), 
 and due to the structure of the string, which we know, we now expect the next element to be of type character, 
 as it is the ,. We need to extract that from the string, 
 because otherwise in the next loop of the while case will try to extracht a number as the next thing of the string, 
 but gets the comma, which cannot be extracted as integer, 
 and therefore the loop condition will fail and we jump out after only the first extracted number.
 ######################################################################################################
